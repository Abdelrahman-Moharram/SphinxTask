@page "/clients/{Id}/products/create"
@model SpinxTask.Pages.Clients.Details.CreateModel
@{
}

@if (Model.res != null)
{
    <div class="alert alert-danger">
        @Model.res.Message
    </div>
}
<form method="post">
    <div class="mb-3 align-items-center gap-5">
        <label for="ProductId" class="form-label">Products</label>
        <select class="form-select" asp-for="@Model.clientProduct.ProductId">

            <option selected></option>
            @foreach (var c in Model.ProductList)
            {
                <option value="@c.Id">@c.Name</option>
            }
        </select>

        <ul class="text-danger d-block">
            @if (@ModelState.FirstOrDefault(i => i.Key == "clientProduct.ProductId").Value != null)
                @foreach (var i in @ModelState.FirstOrDefault(i => i.Key == "clientProduct.ProductId").Value?.Errors)
                {
                    <li>@i.ErrorMessage</li>
                }
        </ul>
    </div>

    <div class="mb-3 align-items-center gap-5">
        <label for="ProductId" class="form-label">License</label>
        <input class="form-control" asp-for="@Model.clientProduct.License" />
        <ul class="text-danger d-block">
            @if (@ModelState.FirstOrDefault(i => i.Key == "clientProduct.License").Value != null)
                @foreach (var i in @ModelState.FirstOrDefault(i => i.Key == "clientProduct.License").Value?.Errors)
                {
                    <li>@i.ErrorMessage</li>
                }
        </ul>
    </div>

    <div class="justify-content-between d-flex">
        <div class="mb-3  align-items-center gap-5">
            <label for="StartDate" class="form-label">Start Date</label>
            <input class="form-control" id="startDate" asp-for="@Model.clientProduct.StartDate" />
            <ul class="text-danger d-block">
                @if (@ModelState.FirstOrDefault(i => i.Key == "clientProduct.StartDate").Value != null)
                    @foreach (var i in @ModelState.FirstOrDefault(i => i.Key == "clientProduct.StartDate").Value?.Errors)
                    {
                        <li>@i.ErrorMessage</li>
                    }
            </ul>
        </div>

        <div class="mb-3 align-items-center">
            <label for="EndDate" class="form-label">End Date</label>
            <input class="form-control" id="endDate" asp-for="@Model.clientProduct.EndDate" />
            <ul class="text-danger" id="endDataErrors">
                @if (@ModelState.FirstOrDefault(i => i.Key == "clientProduct.EndDate").Value != null)
                    @foreach (var i in @ModelState.FirstOrDefault(i => i.Key == "clientProduct.EndDate").Value?.Errors)
                    {
                        <li>@i.ErrorMessage</li>
                    }
            </ul>
        </div>

    </div>
    <button class="btn btn-primary" id="saveButton" type="submit">Save</button>
</form>

@* <script>
    function dateStrToObj(dateStr) {
        const [year, month, date] = dateStr.split('-').map(Number)
        return new Date(year, month - 1, date)
    }

    function onChange() {
        const startDateStr = document.querySelector('#startDate').value
        const endDateStr = document.querySelector('#endDate').value

        if (!startDateStr || !endDateStr) return

        const startDate = dateStrToObj(startDateStr)
        const endDate = dateStrToObj(endDateStr)
        if (endDate.valueOf() < startDate.valueOf()) {
            document.getElementById("endDataErrors").innerHTML +=`
                    <li>End date is before start date!</li>
            `
            document.getElementById('saveButton').setAttribute('type', 'button')
        }
    }


    for (const dateInput of document.querySelectorAll('input[type=date]')) {
        dateInput.addEventListener('change', onChange)
    }
</script> *@