// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpinxTask.Infrastructure.Data;

#nullable disable

namespace SpinxTask.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240604181227_Seed-Data")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SpinxTask.Core.Models.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = "6e0063a2-3962-4eda-b345-ef02da6c4362",
                            Name = "A"
                        },
                        new
                        {
                            Id = "c806fb54-bfd2-49ef-9aba-d60562153bf8",
                            Name = "B"
                        },
                        new
                        {
                            Id = "277ff351-1056-40b4-a3cb-cb25e261f670",
                            Name = "C"
                        });
                });

            modelBuilder.Entity("SpinxTask.Core.Models.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("SpinxTask.Core.Models.ClientProduct", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientProducts");
                });

            modelBuilder.Entity("SpinxTask.Core.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SpinxTask.Core.Models.State", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = "50c1ef8d-e48d-4822-93aa-6868da28bbe6",
                            Name = "Active"
                        },
                        new
                        {
                            Id = "1df32b20-befc-4ac6-b314-3db9fdff297c",
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = "9cbf1ed3-fefb-4c9f-8527-8d52830c4d28",
                            Name = "Pending"
                        });
                });

            modelBuilder.Entity("SpinxTask.Core.Models.Client", b =>
                {
                    b.HasOne("SpinxTask.Core.Models.Class", "Class")
                        .WithMany("Clients")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpinxTask.Core.Models.State", "State")
                        .WithMany("Clients")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("State");
                });

            modelBuilder.Entity("SpinxTask.Core.Models.ClientProduct", b =>
                {
                    b.HasOne("SpinxTask.Core.Models.Client", "Client")
                        .WithMany("ClientProducts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpinxTask.Core.Models.Product", "Product")
                        .WithMany("ClientProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SpinxTask.Core.Models.Class", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("SpinxTask.Core.Models.Client", b =>
                {
                    b.Navigation("ClientProducts");
                });

            modelBuilder.Entity("SpinxTask.Core.Models.Product", b =>
                {
                    b.Navigation("ClientProducts");
                });

            modelBuilder.Entity("SpinxTask.Core.Models.State", b =>
                {
                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
